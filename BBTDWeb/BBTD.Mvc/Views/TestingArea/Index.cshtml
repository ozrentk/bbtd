@model BBTD.Mvc.Models.BarcodeSlideshowData

<style>
    div.main-content {
        display: grid;
        grid-template-columns: 1fr 2fr 1fr;
        grid-column-gap: 8px;
        justify-items: center;
    }
</style>

<div class="main-content">
    <div>
        <div class="mt-2 btn-group-vertical">
            <a id="barcodeSlideshowNext" class="btn btn-outline-primary">Next barcode</a>
            <a id="barcodeSlideshowStart" class="btn btn-primary">Slideshow test</a>
            <a asp-action="Index" class="btn btn-warning">Reset</a>
            <span class="btn btn-secondary" disabled>Current: <span class="badge badge-secondary" id="currentBarcodeId">-</span></span>
        </div>
        <span class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="moveToNext" checked="checked">
            <label class="form-check-label" for="moveToNext">Always move to next</label>
        </span>
    </div>
    <div>
        <div class="mt-2">
            <img id="barcodePlaceholder" src="/images/1x1-ffffffff.png" style="image-rendering: pixelated; image-rendering: -moz-crisp-edges; transform: scale(var(--pixel-device-percent))" />
        </div>
    </div>
    <div>
        <form asp-controller="TestingArea">
            <ul class="mt-2 list-group">
                <li class="list-group-item">Barcode size [mod]: <span id="bcSizeMod">-</span></li>
                <li class="list-group-item">Barcode size [px]: <span id="bcSizePx">-</span></li>
                <li class="list-group-item">Barcode size [mm]: <span id="bcSizeMm">-</span></li>
                <li class="list-group-item">Module size [px]: <span id="modSizePx">-</span></li>
                <li class="list-group-item">Module size [mm]: <span id="modSizeMm">-</span></li>
                <li class="list-group-item">Pixel/mm ratio: <span id="pxMmRatios">-</span></li>
            </ul>
            <ul class="mt-2 list-group">
                <li class="list-group-item">
                    <div class="row mt-1">
                        <div class="col-6"><label asp-for="DistanceFromScreen" class="control-label"></label></div>
                        <div class="col-6"><input asp-for="DistanceFromScreen" class="form-control" width="5" min="0" step="5"></div>
                    </div>
                    <div class="row mt-1">
                        <div class="col-6"><label asp-for="BarcodeType" class="control-label"></label></div>
                        <div class="col-6">
                            <select asp-for="BarcodeType" class="form-control">
                                <option value="1">Aztec</option>
                                <option value="32">Data Matrix</option>
                                <option value="1024">PDF417</option>
                                <option value="2048">QR Code</option>
                            </select>
                        </div>
                    </div>
                    <button type="submit" class="mt-2 btn btn-primary">Set</button>
                </li>
            </ul>
        </form>
    </div>
</div>


<div style="height: 30em">
</div>

@section Scripts {
    <script>
        const logDeliveryUrl = "/api/logdelivery/fromwebui";
        const barcodeDetailsUrl = "/testingarea/barcodedetails";
        let logs = [];
        let isSlideShowTest = false;

        class LogLevel {
            static get Trace() { return 0; }
            static get Debug() { return 1; }
            static get Info() { return 2; }
            static get Warn() { return 3; }
            static get Error() { return 4; }
            static get Fatal() { return 5; }
            static get Off() { return 6; }
        }

        class LogOperation {
            static get IMG_REQ() { return "IMG_REQ"; }
            static get IMG_RECV() { return "IMG_RECV"; }
            static get UI_RECV_FAIL() { return "UI_RECV_FAIL"; }
            static get UI_BC_NOTIFIED() { return "UI_BC_NOTIFIED"; }
        }

        const addLog = (message, levelNumber, reference, operation) => {
            if (levelNumber >= LogLevel.Error)
                console.error(message);
            else if (levelNumber >= LogLevel.Warn)
                console.warn(message);
            else
                console.log(message);

            logs.push({
                message: message,
                levelNumber: levelNumber,
                exact_ts: new Date().toISOString(),
                reference: reference,
                operation: operation
            });
        }

        const sendLogs = async () => {
            console.log(`Executing sendLogs() for ${logs.length} messages...`);
            await fetch(logDeliveryUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(logs)
            });
            logs = [];
        }

        const sendLog = async (message, levelNumber, reference, operation) => {
            addLog(message, levelNumber, reference, operation);
            await sendLogs();
        }

        const addOrSendLog = async (message, levelNumber, reference, operation) => {
            if (isSlideShowTest)
                addLog(message, levelNumber, reference, operation);
            else
                await sendLog(message, levelNumber, reference, operation);
        }

        const root = document.documentElement;
        root.style.setProperty('--pixel-device-percent', 1 / window.devicePixelRatio);

        const imageBaseUrl = "/testingarea/barcode";
        const hubUrl = "/messageHub";
        const messageMethod = "Reading";
        const clientReadTimeoutMethod = "ClientReadTimeout";
        const barcodeReadTimeout = @Model.TimeoutMilliseconds;
        let barcodeReadingTimeoutId = -1;

        const dataCount = @Model.DataCount;
        const ids = Array.from({ length: dataCount }, (_, i) => i + 1);
        let currentIndex = -1; @*Model.BarcodeId;*@

        const onDomContentLoaded = async (event) => {
            let signalrConn = new signalR.HubConnectionBuilder().withUrl(hubUrl).build();
            signalrConn.on(messageMethod, onReceiveMessage);
            signalrConn.on(clientReadTimeoutMethod, onReceiveClientReadTimeout);

            let btnElNext = document.getElementById("barcodeSlideshowNext");
            btnElNext.addEventListener("click", barcodeSlideNext);

            let btnElSlideshowStart = document.getElementById("barcodeSlideshowStart");
            btnElSlideshowStart.addEventListener("click", barcodeSlideshowStart);

            try {
                await signalrConn.start();
                sendLog("signalr connection established", LogLevel.Debug);
            } catch(err) {
                sendLog(`signalr initialization error: ${err.toString()}`, LogLevel.Error);
                return;
            }
        }

        const onReceiveMessage = async (id, isReadingCorrect) => {
            clearTimeout(barcodeReadingTimeoutId);
            if (!isReadingCorrect) {
                await addOrSendLog(`[Barcode id=${id}] UI received read failure confirmation`, LogLevel.Error, id, LogOperation.UI_RECV_FAIL);
            } 
            else {
                await addOrSendLog(`[Barcode id=${id}] UI received barcode reading success information`, LogLevel.Debug, id, LogOperation.UI_BC_NOTIFIED);
            }

            let btnElMoveToNext = document.getElementById("moveToNext");
            if (isSlideShowTest || btnElMoveToNext.checked) {
                await barcodeSlideNext();
            }
        }

        const onReceiveClientReadTimeout = async () => {
            const id = ids[currentIndex];

            await addOrSendLog(`[Barcode id=${id}] UI received read failure confirmation for expected id ${id}`, LogLevel.Error, id, LogOperation.UI_RECV_FAIL);

            clearTimeout(barcodeReadingTimeoutId);

            let btnElMoveToNext = document.getElementById("moveToNext");
            if (isSlideShowTest || btnElMoveToNext.checked) {
                await barcodeSlideNext();
            }
        }

        const barcodeSlideshowStart = async () => {
            isSlideShowTest = true;
            await barcodeSlideNext();
        }

        const barcodeSlideNext = async () => {
            const currentBarcodeIdEl = document.getElementById("currentBarcodeId");
            currentIndex++;
            if (currentIndex < dataCount) {
                // Continuation
                const id = ids[currentIndex];
                currentBarcodeIdEl.innerText = id;
                imgEl.src = `${imageBaseUrl}/${id}`;
                await addOrSendLog(`[Barcode id=${id}] Sending image request from UI to server`, LogLevel.Debug, id, LogOperation.IMG_REQ);
                if(!isSlideShowTest) {
                    const resp = await fetch(`${barcodeDetailsUrl}/${id}`);
                    const details = await resp.json();

                    console.log(details);

                    const bcSizeMod = `${details.bcWidthMod} x ${details.bcHeightMod}`;
                    const bcSizePx = `${details.bcWidthPx.toFixed(2)} x ${details.bcHeightPx.toFixed(2)}`;
                    const modSizePx = `${details.moduleWidthPx.toFixed(2)} x ${details.moduleHeightPx.toFixed(2)}`;
                    document.getElementById("bcSizeMod").innerText = bcSizeMod;
                    document.getElementById("bcSizePx").innerText = bcSizePx;
                    document.getElementById("modSizePx").innerText = modSizePx;

                    if (details.isMmAvailable) {
                        const bcSizeMm = `${details.bcWidthMm.toFixed(2)} x ${details.bcHeightMm.toFixed(2)}`;
                        const modSizeMm = `${details.moduleWidthMm.toFixed(2)} x ${details.moduleHeightMm.toFixed(2)}`;
                        const pxMmRatios = `${details.pxMmWidthRatio.toFixed(2)} x ${details.pxMmHeightRatio.toFixed(2)}`;
                        document.getElementById("bcSizeMm").innerText = bcSizeMm;
                        document.getElementById("modSizeMm").innerText = modSizeMm;
                        document.getElementById("pxMmRatios").innerText = pxMmRatios;
                    }
                }
            } else {
                // Finish
                currentIndex = -1;
                isSlideShowTest = false;
                currentBarcodeIdEl.innerText = "Done";
                imgEl.src = "/images/1x1-ffffffff.png";
                await addOrSendLog(`Barcode testing finished, sending logs...`, LogLevel.Debug)
                await sendLogs();
            }
        }

        const imgEl = document.getElementById("barcodePlaceholder");
        imgEl.addEventListener('load', async (evt) => {
            if (currentIndex != -1 && currentIndex < dataCount) {
                const id = ids[currentIndex]
                await addOrSendLog(`[Barcode id=${id}] Received image response, image loaded to UI`, LogLevel.Debug, id, LogOperation.IMG_RECV)
                if (isSlideShowTest && barcodeReadTimeout > 0) {
                    barcodeReadingTimeoutId = setTimeout(async () => {
                        await addOrSendLog(`[Barcode id=${id}] Loading timed out`, LogLevel.Error, id, LogOperation.LOAD_TIMEOUT)
                        await barcodeSlideNext();
                    }, barcodeReadTimeout);
                }
            }
        })
        
        document.addEventListener("DOMContentLoaded", onDomContentLoaded);

    </script>
}